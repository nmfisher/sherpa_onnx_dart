// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:sherpa_onnx_dart/sherpa_onnx_dart.dart')
library;

import 'dart:ffi' as ffi;

/// @param config  Config for the recognizer.
/// @return Return a pointer to the recognizer. The user has to invoke
@ffi.Native<
    ffi.Pointer<SherpaOnnxOnlineRecognizer> Function(
        ffi.Pointer<SherpaOnnxOnlineRecognizerConfig>)>(isLeaf: true)
external ffi.Pointer<SherpaOnnxOnlineRecognizer> CreateOnlineRecognizer(
  ffi.Pointer<SherpaOnnxOnlineRecognizerConfig> config,
);

/// Free a pointer returned by CreateOnlineRecognizer()
///
/// @param p A pointer returned by CreateOnlineRecognizer()
@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxOnlineRecognizer>)>(
    isLeaf: true)
external void DestroyOnlineRecognizer(
  ffi.Pointer<SherpaOnnxOnlineRecognizer> recognizer,
);

/// Create an online stream for accepting wave samples.
///
/// @param recognizer  A pointer returned by CreateOnlineRecognizer()
/// @return Return a pointer to an OnlineStream. The user has to invoke
/// DestroyOnlineStream() to free it to avoid memory leak.
@ffi.Native<
    ffi.Pointer<SherpaOnnxOnlineStream> Function(
        ffi.Pointer<SherpaOnnxOnlineRecognizer>)>(isLeaf: true)
external ffi.Pointer<SherpaOnnxOnlineStream> CreateOnlineStream(
  ffi.Pointer<SherpaOnnxOnlineRecognizer> recognizer,
);

/// Create an online stream for accepting wave samples with the specified hot
/// words.
///
/// @param recognizer  A pointer returned by CreateOnlineRecognizer()
/// @return Return a pointer to an OnlineStream. The user has to invoke
/// DestroyOnlineStream() to free it to avoid memory leak.
@ffi.Native<
    ffi.Pointer<SherpaOnnxOnlineStream> Function(
        ffi.Pointer<SherpaOnnxOnlineRecognizer>,
        ffi.Pointer<ffi.Char>)>(isLeaf: true)
external ffi.Pointer<SherpaOnnxOnlineStream> CreateOnlineStreamWithHotwords(
  ffi.Pointer<SherpaOnnxOnlineRecognizer> recognizer,
  ffi.Pointer<ffi.Char> hotwords,
);

/// Destroy an online stream.
///
/// @param stream A pointer returned by CreateOnlineStream()
@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxOnlineStream>)>(
    isLeaf: true)
external void DestroyOnlineStream(
  ffi.Pointer<SherpaOnnxOnlineStream> stream,
);

/// Accept input audio samples and compute the features.
/// The user has to invoke DecodeOnlineStream() to run the neural network and
/// decoding.
///
/// @param stream  A pointer returned by CreateOnlineStream().
/// @param sample_rate  Sample rate of the input samples. If it is different
/// from config.feat_config.sample_rate, we will do
/// resampling inside sherpa-onnx.
/// @param samples A pointer to a 1-D array containing audio samples.
/// The range of samples has to be normalized to [-1, 1].
/// @param n  Number of elements in the samples array.
@ffi.Native<
    ffi.Void Function(ffi.Pointer<SherpaOnnxOnlineStream>, ffi.Int32,
        ffi.Pointer<ffi.Float>, ffi.Int32)>(isLeaf: true)
external void AcceptWaveform(
  ffi.Pointer<SherpaOnnxOnlineStream> stream,
  int sample_rate,
  ffi.Pointer<ffi.Float> samples,
  int n,
);

/// Return 1 if there are enough number of feature frames for decoding.
/// Return 0 otherwise.
///
/// @param recognizer  A pointer returned by CreateOnlineRecognizer
/// @param stream  A pointer returned by CreateOnlineStream
@ffi.Native<
    ffi.Int32 Function(ffi.Pointer<SherpaOnnxOnlineRecognizer>,
        ffi.Pointer<SherpaOnnxOnlineStream>)>(isLeaf: true)
external int IsOnlineStreamReady(
  ffi.Pointer<SherpaOnnxOnlineRecognizer> recognizer,
  ffi.Pointer<SherpaOnnxOnlineStream> stream,
);

/// Precondition for this function: IsOnlineStreamReady() MUST return 1.
///
/// Usage example:
///
/// while (IsOnlineStreamReady(recognizer, stream)) {
/// DecodeOnlineStream(recognizer, stream);
/// }
@ffi.Native<
    ffi.Void Function(ffi.Pointer<SherpaOnnxOnlineRecognizer>,
        ffi.Pointer<SherpaOnnxOnlineStream>)>(isLeaf: true)
external void DecodeOnlineStream(
  ffi.Pointer<SherpaOnnxOnlineRecognizer> recognizer,
  ffi.Pointer<SherpaOnnxOnlineStream> stream,
);

/// This function is similar to DecodeOnlineStream(). It decodes multiple
/// OnlineStream in parallel.
///
/// Caution: The caller has to ensure each OnlineStream is ready, i.e.,
/// IsOnlineStreamReady() for that stream should return 1.
///
/// @param recognizer  A pointer returned by CreateOnlineRecognizer()
/// @param streams  A pointer array containing pointers returned by
/// CreateOnlineRecognizer()
/// @param n  Number of elements in the given streams array.
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<SherpaOnnxOnlineRecognizer>,
        ffi.Pointer<ffi.Pointer<SherpaOnnxOnlineStream>>,
        ffi.Int32)>(isLeaf: true)
external void DecodeMultipleOnlineStreams(
  ffi.Pointer<SherpaOnnxOnlineRecognizer> recognizer,
  ffi.Pointer<ffi.Pointer<SherpaOnnxOnlineStream>> streams,
  int n,
);

/// Get the decoding results so far for an OnlineStream.
///
/// @param recognizer A pointer returned by CreateOnlineRecognizer().
/// @param stream A pointer returned by CreateOnlineStream().
/// @return A pointer containing the result. The user has to invoke
/// DestroyOnlineRecognizerResult() to free the returned pointer to
/// avoid memory leak.
@ffi.Native<
    ffi.Pointer<SherpaOnnxOnlineRecognizerResult> Function(
        ffi.Pointer<SherpaOnnxOnlineRecognizer>,
        ffi.Pointer<SherpaOnnxOnlineStream>)>(isLeaf: true)
external ffi.Pointer<SherpaOnnxOnlineRecognizerResult> GetOnlineStreamResult(
  ffi.Pointer<SherpaOnnxOnlineRecognizer> recognizer,
  ffi.Pointer<SherpaOnnxOnlineStream> stream,
);

/// Destroy the pointer returned by GetOnlineStreamResult().
///
/// @param r A pointer returned by GetOnlineStreamResult()
@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxOnlineRecognizerResult>)>(
    isLeaf: true)
external void DestroyOnlineRecognizerResult(
  ffi.Pointer<SherpaOnnxOnlineRecognizerResult> r,
);

/// Reset an OnlineStream , which clears the neural network model state
/// and the state for decoding.
///
/// @param recognizer A pointer returned by CreateOnlineRecognizer().
/// @param stream A pointer returned by CreateOnlineStream
@ffi.Native<
    ffi.Void Function(ffi.Pointer<SherpaOnnxOnlineRecognizer>,
        ffi.Pointer<SherpaOnnxOnlineStream>)>(isLeaf: true)
external void Reset(
  ffi.Pointer<SherpaOnnxOnlineRecognizer> recognizer,
  ffi.Pointer<SherpaOnnxOnlineStream> stream,
);

/// Signal that no more audio samples would be available.
/// After this call, you cannot call AcceptWaveform() any more.
///
/// @param stream A pointer returned by CreateOnlineStream()
@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxOnlineStream>)>(
    isLeaf: true)
external void InputFinished(
  ffi.Pointer<SherpaOnnxOnlineStream> stream,
);

/// Return 1 if an endpoint has been detected.
///
/// @param recognizer A pointer returned by CreateOnlineRecognizer()
/// @param stream A pointer returned by CreateOnlineStream()
/// @return Return 1 if an endpoint is detected. Return 0 otherwise.
@ffi.Native<
    ffi.Int32 Function(ffi.Pointer<SherpaOnnxOnlineRecognizer>,
        ffi.Pointer<SherpaOnnxOnlineStream>)>(isLeaf: true)
external int IsEndpoint(
  ffi.Pointer<SherpaOnnxOnlineRecognizer> recognizer,
  ffi.Pointer<SherpaOnnxOnlineStream> stream,
);

/// Create a display object. Must be freed using DestroyDisplay to avoid
/// memory leak.
@ffi.Native<ffi.Pointer<SherpaOnnxDisplay> Function(ffi.Int32)>(isLeaf: true)
external ffi.Pointer<SherpaOnnxDisplay> CreateDisplay(
  int max_word_per_line,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxDisplay>)>(isLeaf: true)
external void DestroyDisplay(
  ffi.Pointer<SherpaOnnxDisplay> display,
);

/// Print the result.
@ffi.Native<
    ffi.Void Function(ffi.Pointer<SherpaOnnxDisplay>, ffi.Int32,
        ffi.Pointer<ffi.Char>)>(isLeaf: true)
external void SherpaOnnxPrint(
  ffi.Pointer<SherpaOnnxDisplay> display,
  int idx,
  ffi.Pointer<ffi.Char> s,
);

/// @param config  Config for the recognizer.
/// @return Return a pointer to the recognizer. The user has to invoke
@ffi.Native<
    ffi.Pointer<SherpaOnnxOfflineRecognizer> Function(
        ffi.Pointer<SherpaOnnxOfflineRecognizerConfig>)>(isLeaf: true)
external ffi.Pointer<SherpaOnnxOfflineRecognizer> CreateOfflineRecognizer(
  ffi.Pointer<SherpaOnnxOfflineRecognizerConfig> config,
);

/// Free a pointer returned by CreateOfflineRecognizer()
///
/// @param p A pointer returned by CreateOfflineRecognizer()
@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxOfflineRecognizer>)>(
    isLeaf: true)
external void DestroyOfflineRecognizer(
  ffi.Pointer<SherpaOnnxOfflineRecognizer> recognizer,
);

/// Create an offline stream for accepting wave samples.
///
/// @param recognizer  A pointer returned by CreateOfflineRecognizer()
/// @return Return a pointer to an OfflineStream. The user has to invoke
/// DestroyOfflineStream() to free it to avoid memory leak.
@ffi.Native<
    ffi.Pointer<SherpaOnnxOfflineStream> Function(
        ffi.Pointer<SherpaOnnxOfflineRecognizer>)>(isLeaf: true)
external ffi.Pointer<SherpaOnnxOfflineStream> CreateOfflineStream(
  ffi.Pointer<SherpaOnnxOfflineRecognizer> recognizer,
);

/// Destroy an offline stream.
///
/// @param stream A pointer returned by CreateOfflineStream()
@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxOfflineStream>)>(
    isLeaf: true)
external void DestroyOfflineStream(
  ffi.Pointer<SherpaOnnxOfflineStream> stream,
);

/// Accept input audio samples and compute the features.
/// The user has to invoke DecodeOfflineStream() to run the neural network and
/// decoding.
///
/// @param stream  A pointer returned by CreateOfflineStream().
/// @param sample_rate  Sample rate of the input samples. If it is different
/// from config.feat_config.sample_rate, we will do
/// resampling inside sherpa-onnx.
/// @param samples A pointer to a 1-D array containing audio samples.
/// The range of samples has to be normalized to [-1, 1].
/// @param n  Number of elements in the samples array.
///
/// @caution: For each offline stream, please invoke this function only once!
@ffi.Native<
    ffi.Void Function(ffi.Pointer<SherpaOnnxOfflineStream>, ffi.Int32,
        ffi.Pointer<ffi.Float>, ffi.Int32)>(isLeaf: true)
external void AcceptWaveformOffline(
  ffi.Pointer<SherpaOnnxOfflineStream> stream,
  int sample_rate,
  ffi.Pointer<ffi.Float> samples,
  int n,
);

/// Decode an offline stream.
///
/// We assume you have invoked AcceptWaveformOffline() for the given stream
/// before calling this function.
///
/// @param recognizer A pointer returned by CreateOfflineRecognizer().
/// @param stream A pointer returned by CreateOfflineStream()
@ffi.Native<
    ffi.Void Function(ffi.Pointer<SherpaOnnxOfflineRecognizer>,
        ffi.Pointer<SherpaOnnxOfflineStream>)>(isLeaf: true)
external void DecodeOfflineStream(
  ffi.Pointer<SherpaOnnxOfflineRecognizer> recognizer,
  ffi.Pointer<SherpaOnnxOfflineStream> stream,
);

/// Decode a list offline streams in parallel.
///
/// We assume you have invoked AcceptWaveformOffline() for each stream
/// before calling this function.
///
/// @param recognizer A pointer returned by CreateOfflineRecognizer().
/// @param streams A pointer pointer array containing pointers returned
/// by CreateOfflineStream().
/// @param n Number of entries in the given streams.
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<SherpaOnnxOfflineRecognizer>,
        ffi.Pointer<ffi.Pointer<SherpaOnnxOfflineStream>>,
        ffi.Int32)>(isLeaf: true)
external void DecodeMultipleOfflineStreams(
  ffi.Pointer<SherpaOnnxOfflineRecognizer> recognizer,
  ffi.Pointer<ffi.Pointer<SherpaOnnxOfflineStream>> streams,
  int n,
);

/// Get the result of the offline stream.
///
/// We assume you have called DecodeOfflineStream() or
/// DecodeMultipleOfflineStreams() with the given stream before calling
/// this function.
///
/// @param stream A pointer returned by CreateOfflineStream().
/// @return Return a pointer to the result. The user has to invoke
/// DestroyOnlineRecognizerResult() to free the returned pointer to
/// avoid memory leak.
@ffi.Native<
    ffi.Pointer<SherpaOnnxOfflineRecognizerResult> Function(
        ffi.Pointer<SherpaOnnxOfflineStream>)>(isLeaf: true)
external ffi.Pointer<SherpaOnnxOfflineRecognizerResult> GetOfflineStreamResult(
  ffi.Pointer<SherpaOnnxOfflineStream> stream,
);

/// Destroy the pointer returned by GetOfflineStreamResult().
///
/// @param r A pointer returned by GetOfflineStreamResult()
@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxOfflineRecognizerResult>)>(
    isLeaf: true)
external void DestroyOfflineRecognizerResult(
  ffi.Pointer<SherpaOnnxOfflineRecognizerResult> r,
);

@ffi.Native<ffi.Pointer<SherpaOnnxCircularBuffer> Function(ffi.Int32)>(
    isLeaf: true)
external ffi.Pointer<SherpaOnnxCircularBuffer> SherpaOnnxCreateCircularBuffer(
  int capacity,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxCircularBuffer>)>(
    isLeaf: true)
external void SherpaOnnxDestroyCircularBuffer(
  ffi.Pointer<SherpaOnnxCircularBuffer> buffer,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<SherpaOnnxCircularBuffer>,
        ffi.Pointer<ffi.Float>, ffi.Int32)>(isLeaf: true)
external void SherpaOnnxCircularBufferPush(
  ffi.Pointer<SherpaOnnxCircularBuffer> buffer,
  ffi.Pointer<ffi.Float> p,
  int n,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(ffi.Pointer<SherpaOnnxCircularBuffer>,
        ffi.Int32, ffi.Int32)>(isLeaf: true)
external ffi.Pointer<ffi.Float> SherpaOnnxCircularBufferGet(
  ffi.Pointer<SherpaOnnxCircularBuffer> buffer,
  int start_index,
  int n,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Float>)>(isLeaf: true)
external void SherpaOnnxCircularBufferFree(
  ffi.Pointer<ffi.Float> p,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<SherpaOnnxCircularBuffer>, ffi.Int32)>(isLeaf: true)
external void SherpaOnnxCircularBufferPop(
  ffi.Pointer<SherpaOnnxCircularBuffer> buffer,
  int n,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<SherpaOnnxCircularBuffer>)>(
    isLeaf: true)
external int SherpaOnnxCircularBufferSize(
  ffi.Pointer<SherpaOnnxCircularBuffer> buffer,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxCircularBuffer>)>(
    isLeaf: true)
external void SherpaOnnxCircularBufferReset(
  ffi.Pointer<SherpaOnnxCircularBuffer> buffer,
);

@ffi.Native<
    ffi.Pointer<SherpaOnnxVoiceActivityDetector> Function(
        ffi.Pointer<SherpaOnnxVadModelConfig>, ffi.Float)>(isLeaf: true)
external ffi.Pointer<SherpaOnnxVoiceActivityDetector>
    SherpaOnnxCreateVoiceActivityDetector(
  ffi.Pointer<SherpaOnnxVadModelConfig> config,
  double buffer_size_in_seconds,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxVoiceActivityDetector>)>(
    isLeaf: true)
external void SherpaOnnxDestroyVoiceActivityDetector(
  ffi.Pointer<SherpaOnnxVoiceActivityDetector> p,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<SherpaOnnxVoiceActivityDetector>,
        ffi.Pointer<ffi.Float>, ffi.Int32)>(isLeaf: true)
external void SherpaOnnxVoiceActivityDetectorAcceptWaveform(
  ffi.Pointer<SherpaOnnxVoiceActivityDetector> p,
  ffi.Pointer<ffi.Float> samples,
  int n,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<SherpaOnnxVoiceActivityDetector>)>(
    isLeaf: true)
external int SherpaOnnxVoiceActivityDetectorEmpty(
  ffi.Pointer<SherpaOnnxVoiceActivityDetector> p,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<SherpaOnnxVoiceActivityDetector>)>(
    isLeaf: true)
external int SherpaOnnxVoiceActivityDetectorDetected(
  ffi.Pointer<SherpaOnnxVoiceActivityDetector> p,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxVoiceActivityDetector>)>(
    isLeaf: true)
external void SherpaOnnxVoiceActivityDetectorPop(
  ffi.Pointer<SherpaOnnxVoiceActivityDetector> p,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxVoiceActivityDetector>)>(
    isLeaf: true)
external void SherpaOnnxVoiceActivityDetectorClear(
  ffi.Pointer<SherpaOnnxVoiceActivityDetector> p,
);

@ffi.Native<
    ffi.Pointer<SherpaOnnxSpeechSegment> Function(
        ffi.Pointer<SherpaOnnxVoiceActivityDetector>)>(isLeaf: true)
external ffi.Pointer<SherpaOnnxSpeechSegment>
    SherpaOnnxVoiceActivityDetectorFront(
  ffi.Pointer<SherpaOnnxVoiceActivityDetector> p,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxSpeechSegment>)>(
    isLeaf: true)
external void SherpaOnnxDestroySpeechSegment(
  ffi.Pointer<SherpaOnnxSpeechSegment> p,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxVoiceActivityDetector>)>(
    isLeaf: true)
external void SherpaOnnxVoiceActivityDetectorReset(
  ffi.Pointer<SherpaOnnxVoiceActivityDetector> p,
);

@ffi.Native<
    ffi.Pointer<SherpaOnnxOfflineTts> Function(
        ffi.Pointer<SherpaOnnxOfflineTtsConfig>)>(isLeaf: true)
external ffi.Pointer<SherpaOnnxOfflineTts> SherpaOnnxCreateOfflineTts(
  ffi.Pointer<SherpaOnnxOfflineTtsConfig> config,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxOfflineTts>)>(isLeaf: true)
external void SherpaOnnxDestroyOfflineTts(
  ffi.Pointer<SherpaOnnxOfflineTts> tts,
);

@ffi.Native<
    ffi.Pointer<SherpaOnnxGeneratedAudio> Function(
        ffi.Pointer<SherpaOnnxOfflineTts>,
        ffi.Pointer<ffi.Char>,
        ffi.Int32,
        ffi.Float)>(isLeaf: true)
external ffi.Pointer<SherpaOnnxGeneratedAudio> SherpaOnnxOfflineTtsGenerate(
  ffi.Pointer<SherpaOnnxOfflineTts> tts,
  ffi.Pointer<ffi.Char> text,
  int sid,
  double speed,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<SherpaOnnxGeneratedAudio>)>(
    isLeaf: true)
external void SherpaOnnxDestroyOfflineTtsGeneratedAudio(
  ffi.Pointer<SherpaOnnxGeneratedAudio> p,
);

@ffi.Native<
    ffi.Int32 Function(ffi.Pointer<ffi.Float>, ffi.Int32, ffi.Int32,
        ffi.Pointer<ffi.Char>)>(isLeaf: true)
external int SherpaOnnxWriteWave(
  ffi.Pointer<ffi.Float> samples,
  int n,
  int sample_rate,
  ffi.Pointer<ffi.Char> filename,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Int>)>(isLeaf: true)
external void sherpa_onnx_dart_resample(
  ffi.Pointer<ffi.Float> data,
  int length,
  int sampleRateFrom,
  int sampleRateTo,
  ffi.Pointer<ffi.Pointer<ffi.Float>> outPtr,
  ffi.Pointer<ffi.Int> outLen,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Float>)>(isLeaf: true)
external void sherpa_onnx_dart_free(
  ffi.Pointer<ffi.Float> data,
);

/// Please refer to
/// https://k2-fsa.github.io/sherpa/onnx/pretrained_models/index.html
/// to download pre-trained models. That is, you can find encoder-xxx.onnx
/// decoder-xxx.onnx, joiner-xxx.onnx, and tokens.txt for this struct
/// from there.
final class SherpaOnnxOnlineTransducerModelConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Char> encoder;

  external ffi.Pointer<ffi.Char> decoder;

  external ffi.Pointer<ffi.Char> joiner;
}

final class SherpaOnnxOnlineParaformerModelConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Char> encoder;

  external ffi.Pointer<ffi.Char> decoder;
}

final class SherpaOnnxModelConfig extends ffi.Struct {
  external SherpaOnnxOnlineTransducerModelConfig transducer;

  external SherpaOnnxOnlineParaformerModelConfig paraformer;

  external ffi.Pointer<ffi.Char> tokens;

  @ffi.Int32()
  external int num_threads;

  external ffi.Pointer<ffi.Char> provider;

  @ffi.Int32()
  external int debug;

  external ffi.Pointer<ffi.Char> model_type;
}

/// It expects 16 kHz 16-bit single channel wave format.
final class SherpaOnnxFeatureConfig extends ffi.Struct {
  /// Sample rate of the input data. MUST match the one expected
  /// by the model. For instance, it should be 16000 for models provided
  /// by us.
  @ffi.Int32()
  external int sample_rate;

  /// Feature dimension of the model.
  /// For instance, it should be 80 for models provided by us.
  @ffi.Int32()
  external int feature_dim;
}

final class SherpaOnnxOnlineRecognizerConfig extends ffi.Struct {
  external SherpaOnnxFeatureConfig feat_config;

  external SherpaOnnxOnlineModelConfig model_config;

  /// Possible values are: greedy_search, modified_beam_search
  external ffi.Pointer<ffi.Char> decoding_method;

  /// Used only when decoding_method is modified_beam_search
  /// Example value: 4
  @ffi.Int32()
  external int max_active_paths;

  /// 0 to disable endpoint detection.
  /// A non-zero value to enable endpoint detection.
  @ffi.Int32()
  external int enable_endpoint;

  /// An endpoint is detected if trailing silence in seconds is larger than
  /// this value even if nothing has been decoded.
  /// Used only when enable_endpoint is not 0.
  @ffi.Float()
  external double rule1_min_trailing_silence;

  /// An endpoint is detected if trailing silence in seconds is larger than
  /// this value after something that is not blank has been decoded.
  /// Used only when enable_endpoint is not 0.
  @ffi.Float()
  external double rule2_min_trailing_silence;

  /// An endpoint is detected if the utterance in seconds is larger than
  /// this value.
  /// Used only when enable_endpoint is not 0.
  @ffi.Float()
  external double rule3_min_utterance_length;

  /// Path to the hotwords.
  external ffi.Pointer<ffi.Char> hotwords_file;

  /// Bonus score for each token in hotwords.
  @ffi.Float()
  external double hotwords_score;
}

typedef SherpaOnnxOnlineModelConfig = SherpaOnnxModelConfig;

final class SherpaOnnxOnlineRecognizerResult extends ffi.Struct {
  external ffi.Pointer<ffi.Char> text;

  external ffi.Pointer<ffi.Char> tokens;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> tokens_arr;

  external ffi.Pointer<ffi.Float> timestamps;

  @ffi.Int32()
  external int count;

  /// Return a json string.
  ///
  /// The returned string contains:
  /// {
  /// "text": "The recognition result",
  /// "tokens": [x, x, x],
  /// "timestamps": [x, x, x],
  /// "segment": x,
  /// "start_time": x,
  /// "is_final": true|false
  /// }
  external ffi.Pointer<ffi.Char> json;
}

final class SherpaOnnxOnlineRecognizer extends ffi.Opaque {}

final class SherpaOnnxOnlineStream extends ffi.Opaque {}

final class SherpaOnnxDisplay extends ffi.Opaque {}

/// Please refer to
/// https://k2-fsa.github.io/sherpa/onnx/pretrained_models/index.html
/// to download pre-trained models. That is, you can find encoder-xxx.onnx
/// decoder-xxx.onnx, and joiner-xxx.onnx for this struct
/// from there.
final class SherpaOnnxOfflineTransducerModelConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Char> encoder;

  external ffi.Pointer<ffi.Char> decoder;

  external ffi.Pointer<ffi.Char> joiner;
}

final class SherpaOnnxOfflineParaformerModelConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Char> model;
}

final class SherpaOnnxOfflineNemoEncDecCtcModelConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Char> model;
}

final class SherpaOnnxOfflineWhisperModelConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Char> encoder;

  external ffi.Pointer<ffi.Char> decoder;
}

final class SherpaOnnxOfflineTdnnModelConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Char> model;
}

final class SherpaOnnxOfflineLMConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Char> model;

  @ffi.Float()
  external double scale;
}

final class SherpaOnnxOfflineModelConfig extends ffi.Struct {
  external SherpaOnnxOfflineTransducerModelConfig transducer;

  external SherpaOnnxOfflineParaformerModelConfig paraformer;

  external SherpaOnnxOfflineNemoEncDecCtcModelConfig nemo_ctc;

  external SherpaOnnxOfflineWhisperModelConfig whisper;

  external SherpaOnnxOfflineTdnnModelConfig tdnn;

  external ffi.Pointer<ffi.Char> tokens;

  @ffi.Int32()
  external int num_threads;

  @ffi.Int32()
  external int debug;

  external ffi.Pointer<ffi.Char> provider;

  external ffi.Pointer<ffi.Char> model_type;
}

final class SherpaOnnxOfflineRecognizerConfig extends ffi.Struct {
  external SherpaOnnxFeatureConfig feat_config;

  external SherpaOnnxOfflineModelConfig model_config;

  external SherpaOnnxOfflineLMConfig lm_config;

  external ffi.Pointer<ffi.Char> decoding_method;

  @ffi.Int32()
  external int max_active_paths;

  /// Path to the hotwords.
  external ffi.Pointer<ffi.Char> hotwords_file;

  /// Bonus score for each token in hotwords.
  @ffi.Float()
  external double hotwords_score;
}

final class SherpaOnnxOfflineRecognizer extends ffi.Opaque {}

final class SherpaOnnxOfflineStream extends ffi.Opaque {}

final class SherpaOnnxOfflineRecognizerResult extends ffi.Struct {
  external ffi.Pointer<ffi.Char> text;

  external ffi.Pointer<ffi.Float> timestamps;

  @ffi.Int32()
  external int count;
}

final class SherpaOnnxSileroVadModelConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Char> model;

  @ffi.Float()
  external double threshold;

  @ffi.Float()
  external double min_silence_duration;

  @ffi.Float()
  external double min_speech_duration;

  @ffi.Int()
  external int window_size;
}

final class SherpaOnnxVadModelConfig extends ffi.Struct {
  external SherpaOnnxSileroVadModelConfig silero_vad;

  @ffi.Int32()
  external int sample_rate;

  @ffi.Int32()
  external int num_threads;

  external ffi.Pointer<ffi.Char> provider;

  @ffi.Int32()
  external int debug;
}

final class SherpaOnnxCircularBuffer extends ffi.Opaque {}

final class SherpaOnnxSpeechSegment extends ffi.Struct {
  @ffi.Int32()
  external int start;

  external ffi.Pointer<ffi.Float> samples;

  @ffi.Int32()
  external int n;
}

final class SherpaOnnxVoiceActivityDetector extends ffi.Opaque {}

final class SherpaOnnxOfflineTtsVitsModelConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Char> model;

  external ffi.Pointer<ffi.Char> lexicon;

  external ffi.Pointer<ffi.Char> tokens;

  @ffi.Float()
  external double noise_scale;

  @ffi.Float()
  external double noise_scale_w;

  @ffi.Float()
  external double length_scale;
}

final class SherpaOnnxOfflineTtsModelConfig extends ffi.Struct {
  external SherpaOnnxOfflineTtsVitsModelConfig vits;

  @ffi.Int32()
  external int num_threads;

  @ffi.Int32()
  external int debug;

  external ffi.Pointer<ffi.Char> provider;
}

final class SherpaOnnxOfflineTtsConfig extends ffi.Struct {
  external SherpaOnnxOfflineTtsModelConfig model;
}

final class SherpaOnnxGeneratedAudio extends ffi.Struct {
  external ffi.Pointer<ffi.Float> samples;

  @ffi.Int32()
  external int n;

  @ffi.Int32()
  external int sample_rate;
}

final class SherpaOnnxOfflineTts extends ffi.Opaque {}
